version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_MESSAGE_MAX_BYTES: 20000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 20000000
      KAFKA_MAX_REQUEST_SIZE: 20000000
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 20000000
      KAFKA_FETCH_MAX_BYTES: 20000000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network
  db:
    build:
      context: ./DataBase/
      dockerfile: utilisateurdb
    image: db:latest
    environment:
      MYSQL_USER: root
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: utilisateur
      MYSQL_ROOT_PASSWORD: admin
    restart: always
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - '1020:3306'
    networks:
      - app-network

  backend:
    depends_on:
      - db
    build:
      dockerfile: DockerFile.ServiceUtilisateur
    image: "backend:${API_VERSION:-latest}"

    ports:
      - '8007:8080'
    networks:
      - app-network
    links:
      - "db:db"

networks:
  app-network:
    driver: bridge

volumes:
  db-data: